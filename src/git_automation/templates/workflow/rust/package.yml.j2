{%- raw %}
build-package:
  name: Build package
  runs-on: ${{ matrix.runner }}
  permissions:
    contents: read
  outputs:
    version: ${{ steps.generate-filename.outputs.VERSION }}
  strategy:
    fail-fast: false
    matrix:
      include:
        - target: x86_64-unknown-linux-gnu
          runner: ubuntu-latest
        - target: x86_64-unknown-linux-musl
          runner: ubuntu-latest
        - target: aarch64-unknown-linux-gnu
          runner: ubuntu-24.04-arm
        - target: aarch64-unknown-linux-musl
          runner: ubuntu-24.04-arm
        - target: x86_64-apple-darwin
          runner: macos-13
        - target: aarch64-apple-darwin
          runner: macos-13
        - target: x86_64-pc-windows-msvc
          runner: windows-latest
        - target: x86_64-pc-windows-gnu
          runner: windows-latest
        - target: aarch64-pc-windows-msvc
          runner: windows-11-arm
  steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: false

    - name: Install dependencies
      shell: bash
      run: |
        if [[ "${{ matrix.target }}" = *"-musl" ]]; then
          sudo apt update
          sudo apt install -y --no-install-recommends \
            musl-tools
        fi

    - name: Configure rust toolchain stable
      run: rustup update stable && rustup default stable

    - name: Generate filenames
      id: generate-filename
      shell: bash
      run: |
        # Get repo name
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)

        # Get version
        VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')

        # Set output
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "BINARY_NAME=${REPO_NAME}" >> $GITHUB_OUTPUT
        echo "SBOM_NAME=${REPO_NAME}-${VERSION}-${{ matrix.target }}.sbom" >> $GITHUB_OUTPUT
        echo "TAR_GZ_NAME=${REPO_NAME}-${VERSION}-${{ matrix.target }}.tar.gz" >> $GITHUB_OUTPUT

    - name: Build the binary
      run: cargo build --release --locked --target=${{ matrix.job.target }}

    - name: Create tar.gz of binary with license and readme
      run: tar -czf ${{ steps.generate-filename.outputs.TAR_GZ_NAME }} target/${{ matrix.job.target }}/release/${{ steps.generate-filename.outputs.BINARY_NAME }} LICENSE.txt LICENSE_en.txt README.md

    - name: Generate SBOM
      uses: anchore/sbom-action@cee1b8e05ae5b2593a75e197229729eabaa9f8ec # v0.20.2
      with:
        format: cyclonedx-json
        output-file: ${{ steps.generate-filename.outputs.SBOM_NAME }}
        upload-artifact: false
        upload-release-assets: false

    - name: Upload artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: artifacts
        name: artifacts-${{ matrix.target }}
        path: |
          ${{ steps.generate-filename.outputs.TAR_GZ_NAME }}
          ${{ steps.generate-filename.outputs.SBOM_NAME }}
        if-no-files-found: error

sign-publish-artifact:
  name: Sign and publish artifact
  runs-on: ubuntu-latest
  permissions:
    contents: write
    id-token: write # needed for signing the artifact with GitHub OIDC Token
  needs: [create-draft-release, build-artifact]
  steps:
    - name: Install Cosign
      uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

    - name: Downloads artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        pattern: artifacts-*
        merge-multiple: true
        path: /tmp/artifacts

    - name: Create checksum file
      run: |
        shopt -s nullglob
        for archive in /tmp/artifacts/*.tar.gz; do
          echo "Generate checksum for ${archive}"
          CHECKSUM=$(sha256sum ${archive})
          echo $CHECKSUM >> checksums.txt
        done

    - name: Sign the artifacts with GitHub OIDC Token
      env:
        COSIGN_YES: true
      run: |
        shopt -s nullglob
        for archive in /tmp/artifacts/*.tar.gz; do
          echo "Sign archive for ${archive}"
          archive_without_ext="${archive%.tar.gz}"
          cosign sign-blob ${archive} --output-certificate ${archive_without_ext}.pem --output-signature ${archive_without_ext}.sig
        done

    - name: Attest SBOM
      run: |
        shopt -s nullglob
        for sbom in /tmp/artifacts/*.sbom; do
          echo "Attest sbom file ${sbom}"
          sbom_without_ext="${sbom%.sbom}"
          cosign attest-blob -y --type cyclonedx --predicate ${sbom} --output-attestation ${sbom_without_ext}.sbom.intoto.jsonl ${sbom_without_ext}.tar.gz
          rm ${sbom}
        done

    - name: Upload artifact to release
      run: gh release upload ${{ needs.build-artifact.outputs.version }} /tmp/artifacts/* -R ${{ github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
{%- endraw %}
