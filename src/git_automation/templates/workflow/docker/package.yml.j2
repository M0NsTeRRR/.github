{%- set tag_prefix %}
{%- if language == "go" %}v{% endif -%}
{%- endset %}
{%- raw %}
build-docker:
  name: Build docker
  runs-on: ${{ matrix.runner }}
  permissions:
    contents: read
    packages: write # needed for pushing docker image
  outputs:
    tags: ${{ steps.build.outputs.tags }}
    repository_lc: ${{ steps.repository_lc.outputs.REPOSITORY_LC }}
  strategy:
    fail-fast: false
    matrix:
      include:
{%- endraw %}
        {%- for platform in docker_platforms %}
        - os: {{ platform["os"] }}
          arch: {{ platform["arch"] }}
          runner: {{ platform["runner"] }}
        {%- endfor %}
{%- raw %}
  steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        persist-credentials: false

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

    - name: Login to GitHub Container Registry
      uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get repository in lower case
      id: repository_lc
      run: |
        echo "REPOSITORY_LC=${REPOSITORY@L}" >> $GITHUB_OUTPUT
      env:
        REPOSITORY: ${{ github.repository }}

    - name: Get Git commit timestamps
      run: echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
      with:
        images: ghcr.io/${{ github.repository }}

    - name: Build and push by digest
      id: build
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        platforms: ${{ matrix.os }}/${{ matrix.arch }}
        tags: ghcr.io/${{ steps.repository_lc.outputs.REPOSITORY_LC }}
        labels: ${{ steps.meta.outputs.labels }}
        outputs: type=image,push-by-digest=true,name-canonical=true,push=true,oci-mediatypes=true,rewrite-timestamp=true
        build-args: |
          SOURCE_DATE_EPOCH=${{ env.TIMESTAMP }}
          VERSION=${GITHUB_REF_NAME}

    - name: Export digest
      run: |
        mkdir -p ${{ runner.temp }}/digests
        touch "${{ runner.temp }}/digests/${DIGEST#sha256:}"
      env:
        DIGEST: ${{ steps.build.outputs.digest }}

    - name: Upload digest
      uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
      with:
        name: digests-${{ matrix.os }}-${{ matrix.arch }}
        path: ${{ runner.temp }}/digests/*
        if-no-files-found: error
        retention-days: 1

merge-docker:
  name: Merge docker
  runs-on: ubuntu-24.04
  permissions:
    contents: read
    packages: write # needed for pushing docker image
  outputs:
    tags: ${{ steps.meta.outputs.tags }}
    digest: ${{ steps.manifest.outputs.DIGEST }}
  needs: [build-docker]
  steps:
    - name: Downloads digests
      uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6.0.0
      with:
        pattern: digests-*
        merge-multiple: true
        path: ${{ runner.temp }}/digests

    - name: Login to GitHub Container Registry
      uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
      with:
        images: ghcr.io/${{ github.repository }}

    - name: Create manifest list and push
      id: manifest
      working-directory: ${{ runner.temp }}/digests
      run: |
        # Generate the list of tags
        TAGS=$(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON")

        # Generate the list of valid digests
        DIGESTS=""
        for file in *; do
          DIGESTS+="ghcr.io/${REPOSITORY_LC}@sha256:${file} "
        done

        docker buildx imagetools create $TAGS $DIGESTS

        MANIFEST_DIGEST=$(docker buildx imagetools inspect "ghcr.io/${REPOSITORY_LC}:${GITHUB_REF_NAME}" --format "{{json .Manifest.Digest}}" | tr -d '"')
        echo "DIGEST=${MANIFEST_DIGEST}" >> $GITHUB_OUTPUT
      env:
        REPOSITORY_LC: ${{ needs.build-docker.outputs.repository_lc }}

sign-docker:
  name: Sign Docker
  runs-on: ubuntu-24.04
  permissions:
    packages: write # needed for pushing docker signature
    id-token: write # needed for signing the images with GitHub OIDC Token
  env:
    TAGS: ${{ needs.merge-docker.outputs.tags }}
    DIGEST: ${{ needs.merge-docker.outputs.digest }}
  needs: [merge-docker]
  steps:
    - name: Install Cosign
      uses: sigstore/cosign-installer@7e8b541eb2e61bf99390e1afd4be13a184e9ebc5 # v3.10.1

    - name: Install Trivy
      uses: aquasecurity/setup-trivy@e6c2c5e321ed9123bda567646e2f96565e34abe1 # v0.2.4

    - name: Login to GitHub Container Registry
      uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Sign the images with GitHub OIDC Token
      run: |
        images=""
        for tag in ${TAGS}; do
          images+="${tag}@${DIGEST} "
        done
        echo "Sign image for ${images}"
        cosign sign -y --recursive ${images}

    - name: Generate SBOM
      run: |
        for tag in ${TAGS}; do
          sbom_filename=$(echo "$tag" | cut -d'/' -f3-)
          echo "Generate sbom for ${tag}@${DIGEST}"
          trivy image --format cyclonedx --output ${sbom_filename}.sbom ${tag}@${DIGEST}
        done

    - name: Attest images with SBOM
      run: |
        for tag in ${TAGS}; do
          sbom_filename=$(echo "$tag" | cut -d'/' -f3-)
          echo "Attest image for ${tag}@${DIGEST}"
          cosign attest -y \
            --type cyclonedx \
            --predicate ${sbom_filename}.sbom \
            ${tag}@${DIGEST}
        done

verify-docker:
  name: Verify docker
  runs-on: ubuntu-24.04
  permissions:
    packages: read
  env:
    TAGS: ${{ needs.merge-docker.outputs.tags }}
    DIGEST: ${{ needs.merge-docker.outputs.digest }}
  needs: [merge-docker, sign-docker]
  steps:
    - name: Install Cosign
      uses: sigstore/cosign-installer@7e8b541eb2e61bf99390e1afd4be13a184e9ebc5 # v3.10.1

    - name: Verify docker signature
      run: |
        for tag in ${TAGS}; do
          echo "Verify image for ${tag}@${DIGEST}"
          cosign verify ${tag}@${DIGEST} \
            --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/release.yml@refs/tags/${GITHUB_REF_NAME}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com"
        done

    - name: Verify docker attestation
      run: |
        for tag in ${TAGS}; do
          echo "Verify image for ${tag}@${DIGEST}"
          cosign verify-attestation ${tag}@${DIGEST} \
            --type=cyclonedx \
            --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/release.yml@refs/tags/${GITHUB_REF_NAME}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com"
        done
{%- endraw %}
