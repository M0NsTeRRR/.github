{%- raw %}
build-artifact:
  name: Build binary
  runs-on: ubuntu-latest
  permissions:
    contents: read
  strategy:
    matrix:
      platform:
        - linux/amd64
        - linux/arm64
  steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: false

    - name: Set up QEMU
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

    - name: Set up Go
      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
      with:
        go-version: stable

    - name: Extract metadata to build the binary
      id: extract-metadata
      run: |
        # Get repo name
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)

        # Get version
        VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')

        # Get os and arch
        OS=$(echo "${{ matrix.platform }}" | cut -d'/' -f1)
        ARCH=$(echo "${{ matrix.platform }}" | cut -d'/' -f2)

        # Set output
        echo "BINARY_NAME=${REPO_NAME}_${VERSION}_${OS}_${ARCH}" >> $GITHUB_OUTPUT
        echo "TAR_GZ_NAME=${REPO_NAME}_${VERSION}_${OS}_${ARCH}.tar.gz" >> $GITHUB_OUTPUT

    - name: Build binary
      run: CGO_ENABLED=0 go -o "${{ steps.extract-metadata.outputs.BINARY_NAME }}" -ldflags "-X main.version=${{ github.ref_name }}" build main.go

    - name: Create tar.gz of binary with license and readme
      run: tar -czf ${{ steps.extract-metadata.outputs.TAR_GZ_NAME }} ${{ steps.extract-metadata.outputs.BINARY_NAME }} LICENSE LICENSE.fr README.md

    - name: Upload tar.gz
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: artifacts
        path: ${{ steps.extract-metadata.outputs.TAR_GZ_NAME }}

create-checksum:
  name: Publish checksum
  runs-on: ubuntu-latest
  permissions:
    contents: read
  needs: [build-artifact]
  steps:
    - name: Downloads artifacts
      uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
      with:
        name: artifacts
        path: /build

    - name: Create checksum file
      run: |
        shopt -s nullglob
        for archive in /build/*; do
          if [ -z "${archive:-}" ]; then
            break
          fi
          CHECKSUM=$(sha256sum ${archive})
          echo $CHECKSUM >> sha256sums.txt
        done

    - name: Upload checksum
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: artifacts
        path: sha256sums.txt

sign-publish-artifact:
  name: Sign and publish artifact
  runs-on: ubuntu-latest
  permissions:
    contents: write
    id-token: write # needed for signing the artifact with GitHub OIDC Token
  needs: [create-checksum]
  steps:
    - name: Install Cosign
      uses: sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a # v3.8.1

    - name: Downloads artifacts
      uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
      with:
        name: artifacts
        path: /build

    - name: Sign the artifacts with GitHub OIDC Token
      env:
        COSIGN_YES: true
      run: |
        shopt -s nullglob
        for archive in /build/*; do
          if [ -z "${archive:-}" ]; then
            break
          fi
          cosign sign-blob ${archive} --output-certificate ${archive}.pem --output-signature ${archive}.sig
        done

    - name: Upload artifact to release
      run: gh release upload ${{ github.ref }} /build/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
{%- endraw %}