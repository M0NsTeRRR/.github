{%- raw %}
build-artifact:
  name: Build binary
  runs-on: ${{ matrix.runner }}
  permissions:
    contents: read
  outputs:
    version: ${{ steps.generate-filename.outputs.VERSION }}
  strategy:
    fail-fast: false
    matrix:
      include:
{%- endraw %}
        {%- for platform in binary_platforms %}
        - os: {{ platform["os"] }}
          arch: {{ platform["arch"] }}
          runner: {{ platform["runner"] }}
        {%- endfor %}
{%- raw %}
  steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        persist-credentials: false

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version: stable
        cache: false

    - name: Get Git commit timestamps
      run: echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV

    - name: Generate filenames
      id: generate-filename
      shell: bash
      run: |
        # Get repo name
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)

        # Get version
        VERSION=$(echo "${GITHUB_REF_NAME}" | sed 's/^v//')

        # Set output
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "BINARY_NAME=${REPO_NAME}" >> $GITHUB_OUTPUT
        echo "SBOM_NAME=${REPO_NAME}-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.sbom" >> $GITHUB_OUTPUT
        echo "TAR_GZ_NAME=${REPO_NAME}-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" >> $GITHUB_OUTPUT

    - name: Build binary
      run: go build -trimpath -a -o "${{ steps.generate-filename.outputs.BINARY_NAME }}" -ldflags '-w -X main.version=${GITHUB_REF_NAME} -X main.buildTime=${{ env.TIMESTAMP }} -extldflags "-static"'
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0

    - name: Create tar.gz of binary with license and readme
      run: tar -czf ${{ steps.generate-filename.outputs.TAR_GZ_NAME }} ${{ steps.generate-filename.outputs.BINARY_NAME }} LICENSE.txt LICENSE_en.txt README.md

    - name: Generate SBOM
      uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # v0.33.1
      with:
        scan-type: fs
        scan-ref: .
        format: cyclonedx
        output: ${{ steps.generate-filename.outputs.SBOM_NAME }}

    - name: Upload artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: artifacts-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          ${{ steps.generate-filename.outputs.TAR_GZ_NAME }}
          ${{ steps.generate-filename.outputs.SBOM_NAME }}
        if-no-files-found: error
        retention-days: 1

sign-publish-artifact:
  name: Sign and publish artifact
  runs-on: ubuntu-latest
  permissions:
    contents: write
    id-token: write # needed for signing the artifact with GitHub OIDC Token
  needs: [create-draft-release, build-artifact]
  steps:
    - name: Install Cosign
      uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

    - name: Downloads artifacts
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        pattern: artifacts-*
        merge-multiple: true
        path: ${{ runner.temp }}/artifacts

    - name: Create checksum file
      working-directory: ${{ runner.temp }}/artifacts
      run: |
        shopt -s nullglob
        for archive in *.tar.gz; do
          echo "Generate checksum for ${archive}"
          CHECKSUM=$(sha256sum ${archive})
          echo $CHECKSUM >> checksums.txt
        done

    - name: Sign the artifacts with GitHub OIDC Token
      working-directory: ${{ runner.temp }}/artifacts
      env:
        COSIGN_YES: true
      run: |
        shopt -s nullglob
        for archive in *.tar.gz; do
          archive_without_ext="${archive%.tar.gz}"

          echo "Sign archive for ${archive}"
          cosign sign-blob ${archive} \
            --output-certificate ${archive_without_ext}.pem \
            --output-signature ${archive_without_ext}.sig
        done

    - name: Attest SBOM
      working-directory: ${{ runner.temp }}/artifacts
      run: |
        shopt -s nullglob
        for sbom in *.sbom; do
          sbom_without_ext="${sbom%.sbom}"

          echo "Attest sbom file ${sbom}"
          cosign attest-blob -y \
            --type cyclonedx \
            --new-bundle-format \
            --predicate ${sbom} \
            --bundle ${sbom_without_ext}.sbom.bundle \
            ${sbom_without_ext}.tar.gz

          rm ${sbom}
        done

    - name: Upload artifact to release
      working-directory: ${{ runner.temp }}/artifacts
      run: gh release upload v${{ needs.build-artifact.outputs.version }} * -R ${{ github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Trigger Go Proxy Indexing
      run: |
        MAJOR_VERSION=$(echo "${GITHUB_REF_NAME}" | cut -d '.' -f 1 | sed 's/v//')

        if [[ $MAJOR_VERSION -ge 2 ]]; then
          curl https://sum.golang.org/lookup/github.com/${REPOSITORY}/v${MAJOR_VERSION}@${GITHUB_REF_NAME}
          curl https://proxy.golang.org/github.com/${REPOSITORY@L}/v${MAJOR_VERSION}/@v/${GITHUB_REF_NAME}.info
        else
          curl https://sum.golang.org/lookup/github.com/${REPOSITORY}@${GITHUB_REF_NAME}
          curl https://proxy.golang.org/github.com/${REPOSITORY@L}/@v/${GITHUB_REF_NAME}.info
        fi
      env:
        REPOSITORY: ${{ github.repository }}

verify-artifact:
  name: Verify artifact
  runs-on: ubuntu-latest
  permissions:
    contents: read
  needs: [publish-release]
  steps:
    - name: Install Cosign
      uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

    - name: Install Trivy
      uses: aquasecurity/setup-trivy@e6c2c5e321ed9123bda567646e2f96565e34abe1 # v0.2.4

    - name: Download assets from release
      run: gh release download ${GITHUB_REF_NAME} -R ${{ github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify checksum
      run: sha256sum -c checksums.txt

    - name: Verify signature
      run: |
        shopt -s nullglob
        for binary in *.tar.gz; do
          binary_basename="${binary%.tar.gz}"

          echo "Verify binary for ${binary}"
          cosign verify-blob \
            --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/release.yml@refs/tags/${GITHUB_REF_NAME}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --cert "https://github.com/${{ github.repository }}/releases/download/${GITHUB_REF_NAME}/${binary_basename}.pem" \
            --signature "https://github.com/${{ github.repository }}/releases/download/${GITHUB_REF_NAME}/${binary_basename}.sig" \
            ./${binary}
        done

    - name: Verify sbom attestation
      run: |
        for binary in *.tar.gz; do
          binary_basename="${binary%.tar.gz}"

          echo "Verify sbom for ${sbom}"
          cosign verify-blob-attestation \
            --type=cyclonedx \
            --new-bundle-format \
            --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/release.yml@refs/tags/${GITHUB_REF_NAME}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --bundle ./${binary_basename}.sbom.bundle \
            ./${binary}
        done
{%- endraw %}
