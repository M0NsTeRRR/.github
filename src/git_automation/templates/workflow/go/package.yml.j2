{%- raw %}
build-artifact:
  name: Build binary
  runs-on: ${{ matrix.runner }}
  permissions:
    contents: read
  strategy:
    fail-fast: false
    matrix:
      include:
        - os: linux
          arch: amd64
          runner: ubuntu-latest
        - os: linux
          arch: arm64
          runner: ubuntu-24.04-arm
        - os: darwin
          arch: amd64
          runner: macos-13
        - os: darwin
          arch: arm64
          runner: macos-latest
        - os: windows
          arch: amd64
          runner: windows-latest
        - os: windows
          arch: arm64
          runner: windows-11-arm
  steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: false

    - name: Set up Go
      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
      with:
        go-version: stable

    - name: Extract metadata to build the binary
      id: extract-metadata
      run: |
        # Get repo name
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)

        # Get version
        VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')

        # Set output
        echo "BINARY_NAME=${REPO_NAME}" >> $GITHUB_OUTPUT
        echo "TAR_GZ_NAME=${REPO_NAME}-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" >> $GITHUB_OUTPUT

    - name: Build binary
      run: go build -o "${{ steps.extract-metadata.outputs.BINARY_NAME }}" -ldflags "-X main.version=${{ github.ref_name }}" main.go
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0

    - name: Create tar.gz of binary with license and readme
      run: tar -czf ${{ steps.extract-metadata.outputs.TAR_GZ_NAME }} ${{ steps.extract-metadata.outputs.BINARY_NAME }} LICENSE LICENSE.fr README.md

    - name: Upload tar.gz
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: artifacts
        path: ${{ steps.extract-metadata.outputs.TAR_GZ_NAME }}

create-checksum:
  name: Publish checksum
  runs-on: ubuntu-latest
  permissions:
    contents: read
  needs: [build-artifact]
  steps:
    - name: Downloads artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: artifacts
        path: /build

    - name: Create checksum file
      run: |
        shopt -s nullglob
        for archive in /build/*; do
          if [ -z "${archive:-}" ]; then
            break
          fi
          CHECKSUM=$(sha256sum ${archive})
          echo $CHECKSUM >> sha256sums.txt
        done

    - name: Upload checksum
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: artifacts
        path: sha256sums.txt

sign-publish-artifact:
  name: Sign and publish artifact
  runs-on: ubuntu-latest
  permissions:
    contents: write
    id-token: write # needed for signing the artifact with GitHub OIDC Token
  needs: [create-checksum]
  steps:
    - name: Install Cosign
      uses: sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a # v3.8.1

    - name: Downloads artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: artifacts
        path: /build

    - name: Sign the artifacts with GitHub OIDC Token
      env:
        COSIGN_YES: true
      run: |
        shopt -s nullglob
        for archive in /build/*; do
          if [ -z "${archive:-}" ]; then
            break
          fi
          cosign sign-blob ${archive} --output-certificate ${archive}.pem --output-signature ${archive}.sig
        done

    - name: Upload artifact to release
      run: gh release upload ${{ github.ref }} /build/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
{%- endraw %}
